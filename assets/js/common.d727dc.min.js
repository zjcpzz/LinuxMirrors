function debounce(func,wait){let timeout
return function(){const context=this
const args=arguments
clearTimeout(timeout)
timeout=setTimeout(()=>func.apply(context,args),wait)}}
const ComponentSystem={components:{},register:function(componentId,componentDef){this.components[componentId]={id:componentId,instance:null,isInitializing:false,lastInitTime:0,def:componentDef,debouncedInit:null,}
const initFunc=function(){const component=ComponentSystem.components[componentId]
const now=Date.now()
if(component.isInitializing||now-component.lastInitTime<1000){return}
if(!component.instance){component.instance=document.getElementById(componentId)}
if(!component.instance){return}
if(component.instance.hasAttribute('data-initialized')){return}
component.isInitializing=true
component.lastInitTime=now
try{while(component.instance.firstChild){component.instance.removeChild(component.instance.firstChild)}
if(!component.instance.style.width){component.instance.style.width='100%'}
if(typeof Vue!=='undefined'&&typeof TDesign!=='undefined'){const App=Vue.createApp(component.def)
App.use(TDesign.default)
App.mount(component.instance)
component.instance.setAttribute('data-initialized','true')
updateTDesignGlobalTheme()}else if(typeof Vue!=='undefined'){console.error('Vue 未找到')
const errorDiv=document.createElement('div')
errorDiv.innerHTML=`<div class="admonition failure"><p class="admonition-title">组件 ${componentId} 加载失败，请检查 Vue 是否存在！</p></div>`
component.instance.appendChild(errorDiv)}else if(typeof TDesign!=='undefined'){console.error('TDesign UI 未找到')
const errorDiv=document.createElement('div')
errorDiv.innerHTML=`<div class="admonition failure"><p class="admonition-title">组件 ${componentId} 加载失败，请检查 TDesign UI 是否存在！</p></div>`
component.instance.appendChild(errorDiv)}}catch(error){console.error(`组件 ${componentId} 初始化时发生错误：${error}`)}finally{component.isInitializing=false}}
this.components[componentId].debouncedInit=debounce(initFunc,300)
return this.components[componentId].debouncedInit},initAll:function(){Object.values(this.components).forEach((component)=>{if(component.debouncedInit){component.debouncedInit()}})},reinitialize:function(componentId){const component=this.components[componentId]
if(component){component.instance=document.getElementById(componentId)
if(component.instance){component.instance.removeAttribute('data-initialized')
setTimeout(component.debouncedInit,300)}}},reinitializeAll:function(){Object.keys(this.components).forEach((id)=>{this.reinitialize(id)})},}